{"version":3,"sources":["components/Layout.jsx","context/GroupContext.jsx","context/GroupListContext.jsx","components/groups/CreateGroup.jsx","components/groups/chat/desktop/GroupList.jsx","components/groups/chat/Message.jsx","components/Toast.jsx","components/groups/chat/desktop/Chat.jsx","components/groups/chat/desktop/index.jsx","components/groups/chat/mobile/GroupList.jsx","components/groups/chat/mobile/Chat.jsx","components/groups/chat/mobile/index.jsx","components/groups/index.jsx"],"names":["Layout","children","to","aria-label","icon","faCommentAlt","faCalendarAlt","faFileAlt","faCogs","GroupContext","createContext","GroupContextProvider","useState","open","setOpen","groupMobile","setGroupMobile","groupDesktop","setGroupDesktop","desktopInitScroll","setDesktopInitScroll","Provider","value","GroupListContext","GroupListContextProvider","groupList","setGroupList","searchingPhrase","setSearchingPhrase","isSearching","setIsSearching","data","useSWR","swrCall","onSuccess","e","refreshInterval","searchGroup","phrase","result","filter","element","group","name","includes","CreateGroup","useContext","AuthContext","url","users","setUsers","setName","allUsers","setAllUsers","useEffect","getAllUsers","createGroup","a","userIds","map","user","id","callApi","createCallback","notSeenMessages","Dialog","onClose","fullWidth","DialogTitle","DialogContent","DialogContentText","Box","py","Autocomplete","multiple","options","getOptionLabel","option","username","filterSelectedOptions","onChange","renderInput","params","TextField","variant","label","placeholder","type","defaultValue","target","DialogActions","Button","onClick","color","GroupList","length","className","size","InputProps","endAdornment","fontSize","_id","Badge","max","badgeContent","anchorOrigin","vertical","horizontal","Avatar","href","rel","Message","message","groupUsers","setGroupUsers","seenUsers","item","seen","iconsMarkAsSeen","Tooltip","enterTouchDelay","placement","title","Date","createDate","toLocaleString","text","Toast","closeAction","Snackbar","Alert","severity","IconButton","Chat","socket","setSocket","error","setError","messages","setMessages","setMessage","typing","setTyping","seenMessages","setSeenMessages","divRef","useRef","io","connect","config","chatSocektUrl","path","emit","on","status","allMessages","typingUser","find","updateTypingUsers","current","scrollIntoView","behavior","handleTyping","onScroll","ref","x","multiline","onBlur","onFocus","style","cursor","GroupsDesktop","initScroll","setInitScroll","console","log","fullScreen","edge","GroupsMobile","Groups","isDesktopOrLaptop","useMediaQuery","minWidth"],"mappings":"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","file":"static/js/8.6405574c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCogs,\r\n  faCommentAlt,\r\n  faCalendarAlt,\r\n  faFileAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../style/layout.css\";\r\n\r\nexport const Layout = ({ children }) => {\r\n  return (\r\n    <div>\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/groups\" aria-label=\"groups\">\r\n              <FontAwesomeIcon icon={faCommentAlt} />\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/calendar\" aria-label=\"calendar\">\r\n              <FontAwesomeIcon icon={faCalendarAlt} />\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/files\" aria-label=\"files\">\r\n              <FontAwesomeIcon icon={faFileAlt} />\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/account\" aria-label=\"account\">\r\n              <FontAwesomeIcon icon={faCogs} />\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <main>{children}</main>\r\n    </div>\r\n  );\r\n};\r\n","import React, { createContext, useState } from \"react\";\r\n\r\nexport const GroupContext = createContext();\r\n\r\nexport const GroupContextProvider = ({ children }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [groupMobile, setGroupMobile] = useState(null);\r\n  const [groupDesktop, setGroupDesktop] = useState(null);\r\n  const [desktopInitScroll, setDesktopInitScroll] = useState(true);\r\n\r\n  return (\r\n    <GroupContext.Provider\r\n      value={{\r\n        open,\r\n        setOpen,\r\n        groupMobile,\r\n        setGroupMobile,\r\n        groupDesktop,\r\n        setGroupDesktop,\r\n        desktopInitScroll,\r\n        setDesktopInitScroll,\r\n      }}\r\n    >\r\n      {children}\r\n    </GroupContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useState } from \"react\";\r\nimport { swrCall } from \"../helpers/apiCall\";\r\nimport useSWR from \"swr\";\r\n\r\nexport const GroupListContext = createContext();\r\n\r\nexport const GroupListContextProvider = ({ children }) => {\r\n  const [groupList, setGroupList] = useState([]);\r\n  const [searchingPhrase, setSearchingPhrase] = useState(\"\");\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const { data } = useSWR(`/group/getListWithNotification`, swrCall, {\r\n    onSuccess: (e) => (isSearching ? null : setGroupList(e)),\r\n    refreshInterval: 5000,\r\n  });\r\n\r\n  const searchGroup = (phrase) => {\r\n    setSearchingPhrase(phrase);\r\n    const result = data.filter((element) =>\r\n      element.group.name.includes(phrase)\r\n    );\r\n    setGroupList(result);\r\n  };\r\n\r\n  return (\r\n    <GroupListContext.Provider\r\n      value={{\r\n        groupList,\r\n        setGroupList,\r\n        searchGroup,\r\n        setIsSearching,\r\n        searchingPhrase,\r\n        setSearchingPhrase,\r\n      }}\r\n    >\r\n      {children}\r\n    </GroupListContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { AuthContext } from \"context/AuthContext\";\r\nimport { GroupContext } from \"context/GroupContext\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  DialogTitle,\r\n  DialogContentText,\r\n  DialogContent,\r\n  DialogActions,\r\n  Dialog,\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { callApi } from \"helpers/apiCall\";\r\nimport { GroupListContext } from \"context/GroupListContext\";\r\n\r\nexport const CreateGroup = () => {\r\n  const { url } = useContext(AuthContext);\r\n  const { open, setOpen, setGroupMobile, setGroupDesktop } = useContext(\r\n    GroupContext\r\n  );\r\n  const { setGroupList, groupList } = useContext(GroupListContext);\r\n  const [users, setUsers] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const [allUsers, setAllUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getAllUsers();\r\n    return setUsers([]);\r\n  }, [,]);\r\n\r\n  const createGroup = async () => {\r\n    const userIds = users?.map((user) => user.id);\r\n    if (!userIds) {\r\n      return;\r\n    }\r\n    callApi(`/group/create`, \"POST\", createCallback, {\r\n      users: userIds,\r\n      name,\r\n    });\r\n  };\r\n  const getAllUsers = () => callApi(`/users`, \"GET\", setAllUsers);\r\n\r\n  const createCallback = (data) => {\r\n    setGroupList([{ group: data, notSeenMessages: 0 }, ...groupList]);\r\n    setGroupDesktop(data);\r\n    setGroupMobile(data);\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={() => setOpen(false)} fullWidth>\r\n      <DialogTitle id=\"form-dialog-title\">Create Group</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>Select group users.</DialogContentText>\r\n        <Box py={1}>\r\n          <Autocomplete\r\n            multiple\r\n            options={allUsers}\r\n            getOptionLabel={(option) => option.username}\r\n            filterSelectedOptions\r\n            fullWidth={true}\r\n            onChange={(e, value) => setUsers(value)}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                variant=\"outlined\"\r\n                label=\"select users\"\r\n                placeholder=\"select users\"\r\n              />\r\n            )}\r\n          />\r\n        </Box>\r\n        <Box py={1}>\r\n          <TextField\r\n            name=\"group name\"\r\n            label=\"group name\"\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            defaultValue=\"\"\r\n            fullWidth={true}\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </Box>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={() => setOpen(false)} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={createGroup} color=\"primary\">\r\n          Create\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport { TextField, Avatar, Badge } from \"@material-ui/core\";\r\nimport AddCircle from \"@material-ui/icons/AddCircle\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport { GroupContext } from \"context/GroupContext\";\r\nimport { GroupListContext } from \"context/GroupListContext\";\r\nimport VideocamIcon from \"@material-ui/icons/Videocam\";\r\nimport \"style/conversation/desktop/conversations.css\";\r\n\r\nexport const GroupList = () => {\r\n  const {\r\n    groupDesktop,\r\n    setGroupDesktop,\r\n    setOpen,\r\n    setDesktopInitScroll,\r\n  } = useContext(GroupContext);\r\n  const {\r\n    groupList,\r\n    searchGroup,\r\n    setIsSearching,\r\n    searchingPhrase,\r\n    setSearchingPhrase,\r\n  } = useContext(GroupListContext);\r\n\r\n  useEffect(() => {\r\n    if (!groupDesktop && groupList?.length > 0) {\r\n      setGroupDesktop(groupList[0].group);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <TextField\r\n        className=\"conversation-search\"\r\n        placeholder=\"find conversation\"\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        size=\"small\"\r\n        value={searchingPhrase}\r\n        onChange={(e) => {\r\n          if (e.target.value === \"\") {\r\n            setIsSearching(false);\r\n            setSearchingPhrase(\"\");\r\n          } else {\r\n            setIsSearching(true);\r\n            searchGroup(e.target.value);\r\n          }\r\n        }}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <span>\r\n              <AddCircle\r\n                className=\"conversation-search-icon\"\r\n                color=\"primary\"\r\n                fontSize=\"small\"\r\n                onClick={() => setOpen(true)}\r\n              />\r\n            </span>\r\n          ),\r\n        }}\r\n      ></TextField>\r\n      <div className=\"desktop-conversations-container\">\r\n        {groupList?.map(({ notSeenMessages, group: element }) => (\r\n          <div\r\n            className={`${\r\n              groupDesktop?._id === element._id ? \"conversation-active\" : \"\"\r\n            } conversations-item`}\r\n            key={element._id}\r\n          >\r\n            <div\r\n              className=\"conversation-item-text-container\"\r\n              onClick={() => {\r\n                setDesktopInitScroll(true);\r\n                setGroupDesktop(element);\r\n              }}\r\n            >\r\n              {notSeenMessages > 0 ? (\r\n                <Badge\r\n                  max={99}\r\n                  badgeContent={notSeenMessages}\r\n                  color=\"primary\"\r\n                  anchorOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                >\r\n                  <Avatar>\r\n                    {element.users.length > 2 ? <GroupIcon /> : null}\r\n                  </Avatar>\r\n                </Badge>\r\n              ) : (\r\n                <Avatar>\r\n                  {element.users.length > 2 ? <GroupIcon /> : null}\r\n                </Avatar>\r\n              )}\r\n\r\n              <span className=\"conversation-item-text\">{element.name}</span>\r\n            </div>\r\n            {/* <Link */}\r\n            <a\r\n              className=\"conversation-video-link\"\r\n              href={`/remoTalky.client/#/videoCall/${element._id}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              // to={`/videoCall/${element._id}`}\r\n            >\r\n              <VideocamIcon />\r\n            </a>\r\n            {/* </Link> */}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { Tooltip } from \"@material-ui/core\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport { GroupContext } from \"context/GroupContext\";\r\nimport { AuthContext } from \"context/AuthContext\";\r\nimport \"style/conversation/message.css\";\r\nexport const Message = ({ message, type }) => {\r\n  const { user } = useContext(AuthContext);\r\n  const { groupMobile, groupDesktop } = useContext(GroupContext);\r\n  const [groupUsers, setGroupUsers] = useState([]);\r\n  const seenUsers = groupUsers.filter(\r\n    (item) => message.seen.includes(item._id) && message.user._id !== item._id\r\n  );\r\n  const iconsMarkAsSeen = message.seen.filter((item) => item !== user.id);\r\n\r\n  useEffect(() => {\r\n    type === \"mobile\"\r\n      ? setGroupUsers(groupMobile.users)\r\n      : setGroupUsers(groupDesktop.users);\r\n  }, [,]);\r\n\r\n  return (\r\n    <span\r\n      className={`${\r\n        message.user._id === user.id ? \"message-right\" : \"message-left\"\r\n      } message-container`}\r\n      key={message._id}\r\n    >\r\n      {iconsMarkAsSeen?.length > 0 && message.user._id === user.id ? (\r\n        <span className=\"message-icons\">\r\n          {iconsMarkAsSeen.map((e) => (\r\n            <DoneIcon key={e} />\r\n          ))}\r\n        </span>\r\n      ) : null}\r\n      <Tooltip\r\n        enterTouchDelay={10}\r\n        placement={message.user._id === user.id ? \"left\" : \"right\"}\r\n        title={\r\n          <span className=\"message-tooltip\">\r\n            <span>{new Date(message.createDate).toLocaleString()}</span>\r\n            <span>From {message.user.username}</span>\r\n            <span>Seen: {seenUsers.map((e) => e.username + \" \")}</span>\r\n          </span>\r\n        }\r\n      >\r\n        <span\r\n          className={`${\r\n            message.user._id === user.id ? \"message-dark\" : \"message-light\"\r\n          } message-text`}\r\n        >\r\n          <span>{message.text}</span>\r\n        </span>\r\n      </Tooltip>\r\n      {iconsMarkAsSeen?.length > 0 && message.user._id !== user.id ? (\r\n        <span className=\"message-icons\">\r\n          {iconsMarkAsSeen.map((e) => (\r\n            <DoneIcon key={e} />\r\n          ))}\r\n        </span>\r\n      ) : null}\r\n    </span>\r\n  );\r\n};\r\n","import { Snackbar } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport \"../style/toast.css\";\r\nexport const Toast = ({ type, message, closeAction }) => {\r\n  return (\r\n    <Snackbar\r\n      open\r\n      color=\"primary\"\r\n      children={\r\n        <Alert severity={type} className=\"toast\">\r\n          {message}\r\n          <IconButton aria-label=\"close\" color=\"inherit\" onClick={closeAction}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </Alert>\r\n      }\r\n      anchorOrigin={{\r\n        vertical: \"bottom\",\r\n        horizontal: \"left\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React, { useEffect, useState, useContext, useRef } from \"react\";\r\nimport { AuthContext } from \"context/AuthContext\";\r\nimport io from \"socket.io-client\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { Message } from \"components/groups/chat/Message\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport { Toast } from \"components/Toast\";\r\nimport { GroupContext } from \"context/GroupContext\";\r\nimport \"style/conversation/desktop/messages.css\";\r\nimport { config } from \"config\";\r\n\r\nexport const Chat = () => {\r\n  const { user } = useContext(AuthContext);\r\n  const { groupDesktop, desktopInitScroll, setDesktopInitScroll } = useContext(\r\n    GroupContext\r\n  );\r\n  const [socket, setSocket] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [typing, setTyping] = useState([]);\r\n  const [seenMessages, setSeenMessages] = useState(false);\r\n  const divRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const socket = io.connect(config.chatSocektUrl, {\r\n      path: \"/socket.io\",\r\n      // transports: [\"websocket\"],\r\n    });\r\n    if (groupDesktop) {\r\n      setSocket(socket);\r\n\r\n      socket.emit(\"joinGroup\", user.id, groupDesktop._id);\r\n\r\n      socket.on(\"initMessages\", (data) => {\r\n        if (data.status === \"success\") {\r\n          setMessages(data.data);\r\n        } else {\r\n          setError(data.data.name);\r\n        }\r\n      });\r\n\r\n      socket.on(\"message\", (data) => {\r\n        if (data.status === \"success\") {\r\n          setMessages((allMessages) => [...allMessages, data.data]);\r\n        } else {\r\n          setError(data.data);\r\n        }\r\n      });\r\n\r\n      socket.on(\"typing\", (data) => {\r\n        if (data.status === \"on\") {\r\n          const typingUser = groupDesktop.users.find(\r\n            (item) => item._id === data.user\r\n          );\r\n          setTyping([...typing, typingUser]);\r\n        } else {\r\n          const updateTypingUsers = typing.filter(\r\n            (item) => item._id !== data.user\r\n          );\r\n          setTyping(updateTypingUsers);\r\n        }\r\n      });\r\n    }\r\n    return () => {\r\n      socket.emit(\"leaveGroup\");\r\n    };\r\n  }, [groupDesktop]);\r\n\r\n  useEffect(() => {\r\n    if (desktopInitScroll) {\r\n      divRef?.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  });\r\n\r\n  useEffect(() => setSeenMessages(false), [groupDesktop]);\r\n\r\n  const addMessage = () => {\r\n    if (message !== \"\") {\r\n      socket.emit(\"message\", message, groupDesktop._id, user.id);\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n  const handleTyping = (type) => socket.emit(\"typing\", type);\r\n  const markMessagesAsSeen = () => {\r\n    if (!seenMessages) {\r\n      socket.emit(\"markMessagesAsSeen\");\r\n      setSeenMessages(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"desktop-messages\"\r\n        onScroll={() => setDesktopInitScroll(false)}\r\n      >\r\n        {messages?.length > 0\r\n          ? messages.map((element) => (\r\n              <Message key={element._id} message={element} type=\"desktop\" />\r\n            ))\r\n          : null}\r\n\r\n        <div ref={divRef} />\r\n      </div>\r\n      {typing?.map((x) => (\r\n        <span className=\"loading-dots\">{x.username}</span>\r\n      ))}\r\n      <TextField\r\n        className=\"desktop-messages-input\"\r\n        placeholder=\"type message..\"\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        size=\"small\"\r\n        multiline\r\n        value={message}\r\n        onBlur={() => handleTyping(\"off\")}\r\n        onFocus={() => {\r\n          markMessagesAsSeen();\r\n          handleTyping(\"on\");\r\n        }}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <SendIcon\r\n              onClick={addMessage}\r\n              style={{ cursor: \"pointer\" }}\r\n              fontSize=\"small\"\r\n              color=\"primary\"\r\n            />\r\n          ),\r\n        }}\r\n      ></TextField>\r\n      {error && (\r\n        <Toast\r\n          type=\"error\"\r\n          message={error}\r\n          closeAction={() => setError(null)}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GroupList } from \"components/groups/chat/desktop/GroupList\";\r\nimport { Chat } from \"components/groups/chat/desktop/Chat\";\r\nimport { GroupContext } from \"context/GroupContext\";\r\nimport \"style/conversation/desktop/index.css\";\r\n\r\nexport const GroupsDesktop = () => {\r\n  const { groupDesktop } = useContext(GroupContext);\r\n  return (\r\n    <div className=\"conversation-desktop\">\r\n      <div className=\"desktop-conversations\">\r\n        <GroupList />\r\n      </div>\r\n      <div className=\"desktop-messages\">{groupDesktop ? <Chat /> : null}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { TextField, Avatar, Badge } from \"@material-ui/core\";\r\nimport AddCircle from \"@material-ui/icons/AddCircle\";\r\nimport GroupIcon from \"@material-ui/icons/Group\";\r\nimport { GroupContext } from \"context/GroupContext\";\r\nimport { GroupListContext } from \"context/GroupListContext\";\r\nimport VideocamIcon from \"@material-ui/icons/Videocam\";\r\nimport \"style/conversation/mobile/conversations.css\";\r\n\r\nexport const GroupList = () => {\r\n  const { groupMobile, setGroupMobile, setOpen } = useContext(GroupContext);\r\n  const {\r\n    groupList,\r\n    searchGroup,\r\n    setIsSearching,\r\n    searchingPhrase,\r\n    setSearchingPhrase,\r\n  } = useContext(GroupListContext);\r\n\r\n  return (\r\n    <div className=\"mobile-conversations-container\">\r\n      <div className=\"mobile-conversations\">\r\n        {groupList?.map(({ notSeenMessages, group: element }) => (\r\n          <div\r\n            className={`${\r\n              groupMobile?._id === element._id ? \"conversation-active\" : \"\"\r\n            } conversations-item`}\r\n            key={element._id}\r\n          >\r\n            <div\r\n              className=\"conversation-item-text-container\"\r\n              onClick={() => setGroupMobile(element)}\r\n            >\r\n              {notSeenMessages > 0 ? (\r\n                <Badge\r\n                  max={99}\r\n                  badgeContent={notSeenMessages}\r\n                  color=\"primary\"\r\n                  anchorOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                >\r\n                  <Avatar>\r\n                    {element.users.length > 2 ? <GroupIcon /> : null}\r\n                  </Avatar>\r\n                </Badge>\r\n              ) : (\r\n                <Avatar>\r\n                  {element.users.length > 2 ? <GroupIcon /> : null}\r\n                </Avatar>\r\n              )}\r\n\r\n              <span className=\"conversation-item-text\">{element.name}</span>\r\n            </div>\r\n            {/* <Link */}\r\n            <a\r\n              className=\"conversation-video-link\"\r\n              href={`/remoTalky.client/#/videoCall/${element._id}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              // to={`/videoCall/${element._id}`}\r\n            >\r\n              <VideocamIcon />\r\n            </a>\r\n            {/* </Link> */}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <TextField\r\n        className=\"mobile-conversations-search\"\r\n        placeholder=\"find conversation\"\r\n        variant=\"outlined\"\r\n        fullWidth\r\n        size=\"small\"\r\n        value={searchingPhrase}\r\n        onChange={(e) => {\r\n          if (e.target.value === \"\") {\r\n            setIsSearching(false);\r\n            setSearchingPhrase(\"\");\r\n          } else {\r\n            setIsSearching(true);\r\n            searchGroup(e.target.value);\r\n          }\r\n        }}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <span>\r\n              <AddCircle\r\n                className=\"mobile-conversations-search-icon\"\r\n                color=\"primary\"\r\n                fontSize=\"small\"\r\n                onClick={() => setOpen(true)}\r\n              />\r\n            </span>\r\n          ),\r\n        }}\r\n      ></TextField>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useContext, useState, useRef } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport io from \"socket.io-client\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { GroupContext } from \"context/GroupContext\";\r\nimport { AuthContext } from \"context/AuthContext\";\r\nimport { Message } from \"components/groups/chat/Message\";\r\nimport \"style/conversation/mobile/messages.css\";\r\nimport { config } from \"config\";\r\n\r\nexport const Chat = () => {\r\n  const { groupMobile, setGroupMobile } = useContext(GroupContext);\r\n  const { user } = useContext(AuthContext);\r\n  const [socket, setSocket] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [typing, setTyping] = useState([]);\r\n  const [seenMessages, setSeenMessages] = useState(false);\r\n  const [initScroll, setInitScroll] = useState(true);\r\n  const divRef = useRef(null);\r\n  useEffect(() => {\r\n    const socket = io.connect(config.chatSocektUrl, {\r\n      path: \"/socket.io\",\r\n      // transports: [\"websocket\"],\r\n    });\r\n    if (groupMobile) {\r\n      setSocket(socket);\r\n\r\n      socket.emit(\"joinGroup\", user.id, groupMobile._id);\r\n\r\n      socket.on(\"initMessages\", (data) => {\r\n        if (data.status === \"success\") {\r\n          setMessages(data.data);\r\n        } else {\r\n          setError(data.data);\r\n        }\r\n      });\r\n\r\n      socket.on(\"message\", (data) => {\r\n        if (data.status === \"success\") {\r\n          console.log(data);\r\n          setMessages((allMessages) => [...allMessages, data.data]);\r\n        } else {\r\n          setError(data.data.name);\r\n        }\r\n      });\r\n\r\n      socket.on(\"typing\", (data) => {\r\n        if (data.status === \"on\") {\r\n          const typingUser = groupMobile.users.find(\r\n            (item) => item._id === data.user\r\n          );\r\n          setTyping([...typing, typingUser]);\r\n        } else {\r\n          const updateTypingUsers = typing.filter(\r\n            (item) => item._id !== data.user\r\n          );\r\n          setTyping(updateTypingUsers);\r\n        }\r\n      });\r\n    }\r\n    return () => {\r\n      socket.emit(\"leaveGroup\");\r\n    };\r\n  }, [groupMobile]);\r\n\r\n  useEffect(() => {\r\n    if (initScroll) {\r\n      divRef?.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  });\r\n\r\n  const addMessage = () => {\r\n    if (message !== \"\") {\r\n      socket.emit(\"message\", message, groupMobile._id, user.id);\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n  const handleTyping = (type) => socket.emit(\"typing\", type);\r\n\r\n  const markMessagesAsSeen = () => {\r\n    if (!seenMessages) {\r\n      socket.emit(\"markMessagesAsSeen\");\r\n      setSeenMessages(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog fullScreen open={!!groupMobile} className=\"mobile-messages\">\r\n      <div className=\"mobile-messages-bar\">\r\n        <IconButton\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n          onClick={() => {\r\n            setSeenMessages(false);\r\n            setGroupMobile(null);\r\n            setInitScroll(true);\r\n          }}\r\n          aria-label=\"close\"\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n        {groupMobile?.name && <span>{groupMobile.name}</span>}\r\n      </div>\r\n      <div\r\n        className=\"mobile-messages-content\"\r\n        onScroll={() => setInitScroll(false)}\r\n      >\r\n        {messages?.length > 0\r\n          ? messages.map((element) => (\r\n              <Message key={element._id} message={element} type=\"mobile\" />\r\n            ))\r\n          : null}\r\n\r\n        <div ref={divRef} />\r\n      </div>\r\n      {typing?.map((x) => (\r\n        <span className=\"loading-dots\">{x.username}</span>\r\n      ))}\r\n\r\n      <TextField\r\n        className=\"mobile-messages-input\"\r\n        placeholder=\"type message..\"\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n        multiline\r\n        value={message}\r\n        onBlur={() => handleTyping(\"off\")}\r\n        onFocus={() => {\r\n          markMessagesAsSeen();\r\n          handleTyping(\"on\");\r\n        }}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <SendIcon\r\n              onClick={addMessage}\r\n              style={{ cursor: \"pointer\" }}\r\n              fontSize=\"small\"\r\n              color=\"primary\"\r\n            />\r\n          ),\r\n        }}\r\n      ></TextField>\r\n    </Dialog>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { GroupList } from \"components/groups/chat/mobile/GroupList\";\r\nimport { Chat } from \"components/groups/chat/mobile/Chat\";\r\nexport const GroupsMobile = () => {\r\n  return (\r\n    <>\r\n      <GroupList />\r\n      <Chat />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Layout } from \"components/Layout\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { CreateGroup } from \"components/groups/CreateGroup\";\r\nimport { GroupContextProvider } from \"context/GroupContext\";\r\nimport { GroupListContextProvider } from \"context/GroupListContext\";\r\nimport { GroupsDesktop } from \"components/groups/chat/desktop\";\r\nimport { GroupsMobile } from \"components/groups/chat/mobile\";\r\n\r\nconst Groups = () => {\r\n  const isDesktopOrLaptop = useMediaQuery({ minWidth: 800 });\r\n\r\n  return (\r\n    <Layout>\r\n      <GroupContextProvider>\r\n        <GroupListContextProvider>\r\n          {isDesktopOrLaptop ? <GroupsDesktop /> : <GroupsMobile />}\r\n          <CreateGroup />\r\n        </GroupListContextProvider>\r\n      </GroupContextProvider>\r\n    </Layout>\r\n  );\r\n};\r\nexport default Groups;\r\n"],"sourceRoot":""}