{"version":3,"sources":["components/groups/videoCall/Video.jsx","components/groups/videoCall/VideoCall.jsx"],"names":["Video","peer","ref","useRef","useEffect","on","stream","current","srcObject","className","_id","playsInline","autoPlay","VideoCall","useContext","VideoCallContext","socket","setIncommingCall","user","AuthContext","useState","peers","setPeers","audio","setAudio","isMuted","setIsMuted","userVideo","peersRef","groupId","useParams","id","navigator","mediaDevices","getUserMedia","video","then","microphone","getAudioTracks","enabled","emit","callUSers","peersToSet","forEach","userInGroup","createPeer","socketId","username","push","peerID","payload","addPeer","signal","callerID","console","log","prevPeers","item","find","p","catch","error","filter","disconnectedPeer","destroy","currentPeers","setTimeout","userToSignal","Peer","initiator","trickle","incomingSignal","length","map","onClick","window","close"],"mappings":"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","file":"static/js/13.a8e3fe22.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport \"style/groups/peerVideo.css\";\r\nexport const Video = ({ peer }) => {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    peer.peer.on(\"stream\", (stream) => {\r\n      ref.current.srcObject = stream;\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"peer-container\">\r\n      <span>{peer.peer._id}</span>\r\n      <video playsInline autoPlay ref={ref} />\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useRef, useState, useContext } from \"react\";\r\nimport Peer from \"simple-peer\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport CallEndIcon from \"@material-ui/icons/CallEnd\";\r\nimport CallIcon from \"@material-ui/icons/Call\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport MicOffIcon from \"@material-ui/icons/MicOff\";\r\nimport { VideoCallContext } from \"context/VideoCallContext\";\r\nimport { AuthContext } from \"context/AuthContext\";\r\nimport { Video } from \"components/groups/videoCall/Video\";\r\nimport \"style/groups/video.css\";\r\n\r\nconst VideoCall = () => {\r\n  const { socket, setIncommingCall } = useContext(VideoCallContext);\r\n  const { user } = useContext(AuthContext);\r\n  const [peers, setPeers] = useState([]);\r\n  const [audio, setAudio] = useState(true);\r\n  const [isMuted, setIsMuted] = useState(true);\r\n  const userVideo = useRef();\r\n  const peersRef = useRef([]);\r\n  const { id } = useParams();\r\n  const groupId = id;\r\n\r\n  useEffect(() => {\r\n    setIncommingCall(null);\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((stream) => {\r\n        const microphone = stream.getAudioTracks()[0];\r\n        setAudio(microphone);\r\n        microphone.enabled = false;\r\n\r\n        userVideo.current.srcObject = stream;\r\n\r\n        socket.current.emit(\"join call\", groupId, user);\r\n\r\n        socket.current.on(\"all users\", (callUSers) => {\r\n          const peersToSet = [];\r\n          callUSers.forEach((userInGroup) => {\r\n            const peer = createPeer(\r\n              userInGroup.socketId,\r\n              socket.current.id,\r\n              stream,\r\n              userInGroup.username\r\n            );\r\n            peersRef.current.push({\r\n              peerID: userInGroup.socketId,\r\n              peer,\r\n            });\r\n            peersToSet.push({ socketId: userInGroup.socketId, peer });\r\n          });\r\n          setPeers(peersToSet);\r\n        });\r\n\r\n        socket.current.on(\"user joined\", (payload) => {\r\n          const peer = addPeer(\r\n            payload.signal,\r\n            payload.callerID,\r\n            stream,\r\n            payload.username\r\n          );\r\n          console.log(\"add peer - before set state peers\", peer);\r\n          peersRef.current.push({\r\n            peerID: payload.callerID,\r\n            peer,\r\n          });\r\n          setPeers((prevPeers) => [\r\n            ...prevPeers,\r\n            { socketId: payload.callerID, peer },\r\n          ]);\r\n        });\r\n\r\n        socket.current.on(\"receiving returned signal\", (payload) => {\r\n          const item = peersRef.current.find((p) => p.peerID === payload.id);\r\n          if (item) {\r\n            item.peer.signal(payload.signal);\r\n          }\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    socket.current.on(\"user left\", (socketId) => {\r\n      setPeers((prevPeers) =>\r\n        prevPeers.filter((item) => item.socketId !== socketId)\r\n      );\r\n      const disconnectedPeer = peersRef.current.find(\r\n        (item) => item.peerID === socketId\r\n      );\r\n      if (disconnectedPeer) {\r\n        disconnectedPeer.peer.destroy();\r\n      }\r\n      const currentPeers = peersRef.current.filter(\r\n        (item) => item.peerID !== socketId\r\n      );\r\n      peersRef.current = currentPeers;\r\n      setTimeout(() => console.log(peersRef.current), 2000);\r\n    });\r\n  }, [,]);\r\n\r\n  const createPeer = (userToSignal, callerID, stream, username) => {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream,\r\n      username,\r\n    });\r\n    peer.on(\"signal\", (signal) => {\r\n      socket.current.emit(\"sending signal\", {\r\n        userToSignal,\r\n        callerID,\r\n        signal,\r\n        username,\r\n      });\r\n    });\r\n\r\n    return peer;\r\n  };\r\n\r\n  const addPeer = (incomingSignal, callerID, stream, username) => {\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream,\r\n      username,\r\n    });\r\n    peer.on(\"signal\", (signal) => {\r\n      socket.current.emit(\"returning signal\", { signal, callerID });\r\n    });\r\n\r\n    peer.signal(incomingSignal);\r\n\r\n    return peer;\r\n  };\r\n\r\n  const muteMicrophone = () => {\r\n    audio.enabled = !audio.enabled;\r\n    setIsMuted(!audio.enabled);\r\n  };\r\n\r\n  const callAllUsersInGroup = () =>\r\n    socket.current.emit(\"call users\", groupId, user.id);\r\n\r\n  return (\r\n    <div className=\"video-container\">\r\n      <div className=\"video-peers\">\r\n        {peers.length > 0 ? (\r\n          peers.map((peer) => <Video key={peer.peer._id} peer={peer} />)\r\n        ) : (\r\n          <span>You are alone ;_;</span>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"video-bar\">\r\n        <video ref={userVideo} autoPlay playsInline className=\"user-video\" />\r\n\r\n        <div\r\n          onClick={() => {\r\n            socket.current.emit(\"leave call\", user.id);\r\n            window.close();\r\n          }}\r\n        >\r\n          <CallEndIcon />\r\n          <span>End call</span>\r\n        </div>\r\n        <div onClick={callAllUsersInGroup}>\r\n          <CallIcon />\r\n          <span>Call all users</span>\r\n        </div>\r\n        <div onClick={muteMicrophone}>\r\n          {isMuted ? <MicOffIcon /> : <MicIcon />}\r\n          <span>Microphone {isMuted ? \"off\" : \"on\"}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default VideoCall;\r\n"],"sourceRoot":""}